#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('node-rest-auth:server');
var http = require('http');
var socket = require( 'socket.io' );

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);


/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */


server.on('error', onError);
server.on('listening', onListening);

var io = socket.listen(server.listen(port));


io.on('connection', function(socket){
  console.log('a user connected !!!!!!!!!!!');
  app.socket = socket; 
  console.log(socket.client.id);
  socket.on('pingServer', function(msg){
    console.log('message: ' + msg);
    io.emit('messageChannel', 'łoż ty!!!')
  });
  socket.on('getClientID', function(msg){   
    io.emit('sendClientId', {client_id: socket.client.id})
  });

  socket.on('isTyping', function(data){ 
       console.log("isTyping");     
       console.log(data.value);     
       console.log(socket.rooms); 
       io.sockets.in(data.contactId).emit('showTyping',data.value) 
       if(socket.rooms[data.userId + data.contactId]){
        io.sockets.in(data.userId + data.contactId).emit('showTyping',{value:data.value,contactId: data.contactId}) 
      }else if(socket.rooms[data.contactId + data.userId]){
         io.sockets.in(data.contactId + data.userId).emit('showTyping',{value:data.value,contactId: data.contactId}) 
      }   
         
  });

  

  socket.on('disconnect', function(){    
    console.log('user disconnected');
    console.log(io.sockets.adapter.rooms)
   
  });
});

app.io = io;
/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
